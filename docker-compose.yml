version: '3.6'
services:
  telegraf:
    platform: linux/x86_64
    image: telegraf:1.18-alpine
    volumes:
    - ./telegraf/etc/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - influxdb
    links:
      - influxdb
    ports:
    - '127.0.0.1:8125:8125/udp'
    networks:
      - backend

  influxdb:
    platform: linux/x86_64
    image: influxdb:1.8-alpine
    env_file: configuration.env
    ports:
      - '127.0.0.1:8086:8086'
    volumes:
      - ./:/imports
      - influxdb_data:/var/lib/influxdb
    networks:
      - backend


  grafana:
    image: grafana/grafana:8.0.2
    depends_on:
      - influxdb
    env_file: configuration.env
    links:
      - influxdb
    ports:
      - '127.0.0.1:3000:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana/dashboards/:/var/lib/grafana/dashboards/
    networks:
      - backend
  
  nginx:
    image: nginx
    volumes:
    - ./templates:/etc/nginx/templates
    ports:
    - "8080:80"
    environment:
    - NGINX_PORT=80
    networks:
      - backend
  
  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - backend

  backend:
    container_name: nodejs
    restart: always
    build: ./
    ports:
      - "4000:4000"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
    networks:
      - backend

networks:
  backend:
   name: backend

volumes:
  grafana_data: {}
  influxdb_data: {}
